import "./Papyros.css";
import { Remote } from "comlink";
import { Backend } from "./Backend";
import { CodeEditor } from "./CodeEditor";
import { InputManager, InputMode } from "./InputManager";
import { PapyrosEvent } from "./PapyrosEvent";
import { ProgrammingLanguage } from "./ProgrammingLanguage";
import { RenderOptions, ButtonOptions } from "./util/Util";
import { RunState, RunStateManager } from "./RunStateManager";
import { OutputManager } from "./OutputManager";
import { RunListener } from "./RunListener";
/**
 * Groups values related to running code
 */
interface PapyrosCodeState {
    /**
     * The currently used programming language
     */
    programmingLanguage: ProgrammingLanguage;
    /**
     * The editor in which the code is written
     */
    editor: CodeEditor;
    /**
     * The backend that executes the code asynchronously
     */
    backend: Remote<Backend>;
    /**
     * The identifier for the current run
     */
    runId: number;
}
/**
 * Configuration options for this instance of Papyros
 */
interface PapyrosConfig {
    /**
     * Whether Papyros is run in standAlone mode or embedded in an application
     */
    standAlone: boolean;
    /**
     * The programming language to use
     */
    programmingLanguage: ProgrammingLanguage;
    /**
     * The language to use
     */
    locale: string;
    /**
     * The InputMode to use
     */
    inputMode: InputMode;
}
/**
 * Options for rendering Papyros
 */
interface PapyrosRenderOptions {
    /**
     * Options to render Papyros itself, only used in standAlone mode
     */
    standAloneOptions?: RenderOptions;
    /**
     * RenderOptions for the code editor
     */
    codeEditorOptions?: RenderOptions;
    /**
     * RenderOptions for the status panel in the editor
     */
    statusPanelOptions?: RenderOptions;
    /**
     * RenderOptions for the input field
     */
    inputOptions?: RenderOptions;
    /**
     * RenderOptions for the output field
     */
    outputOptions?: RenderOptions;
}
/**
 * Class that manages multiple components to form a coding scratchpad
 */
export declare class Papyros {
    /**
     * Config used to initialize Papyros
     */
    config: PapyrosConfig;
    /**
     * Component to manage and visualize the state of the program
     */
    stateManager: RunStateManager;
    /**
     * Component to request and handle input from the user
     */
    inputManager: InputManager;
    /**
     * Component to handle output generated by the user's code
     */
    outputManager: OutputManager;
    /**
     * Groups all internal properties related to running code
     */
    codeState: PapyrosCodeState;
    /**
     * Listeners to changes in the running state
     */
    runListeners: Array<RunListener>;
    /**
     * Whether this instance has been launched
     */
    private launched;
    /**
     * Construct a new Papyros instance
     * @param {PapyrosConfig} config Properties to configure this instance
     */
    constructor(config: PapyrosConfig);
    /**
     * Register a listener to be notified when code runs start or end
     * @param {RunListener} listener The new listener
     */
    addRunListener(listener: RunListener): void;
    /**
     * Inform the listeners about the current run
     * @param {boolean} start Whether the run started or ended
     */
    private notifyListeners;
    /**
     * Getter for the current state of the program
     */
    get state(): RunState;
    /**
     * Launch this instance of Papyros, making it ready to run code
     * @return {Promise<Papyros>} Promise of launching, chainable
     */
    launch(): Promise<Papyros>;
    /**
     * Set the used programming language to the given one to allow editing and running code
     * @param {ProgrammingLanguage} programmingLanguage The language to use
     */
    setProgrammingLanguage(programmingLanguage: ProgrammingLanguage): Promise<void>;
    /**
     * @param {string} code The code to use in the editor
     */
    setCode(code: string): void;
    /**
     * @return {string} The currently written code
     */
    getCode(): string;
    /**
     * Start up the backend for the current programming language
     */
    private startBackend;
    /**
     * Configure how user input is handled within Papyros
     * By default, we will try to use SharedArrayBuffers
     * If this option is not available, the optional arguments become relevant
     * They are needed to register a service worker to handle communication between threads
     * @param {string} serviceWorkerRoot URL for the directory where the service worker lives
     * @param {string} serviceWorkerName The name of the file containing the script
     * @param {boolean} allowReload Whether we are allowed to force a reload of the page
     * This allows using SharedArrayBuffers without configuring the HTTP headers yourself
     * @return {Promise<boolean>} Promise of configuring input
     */
    configureInput(serviceWorkerRoot?: string, serviceWorkerName?: string, allowReload?: boolean): Promise<boolean>;
    /**
     * Process PapyrosEvents with type="error"
     * @param {PapyrosEvent} e The error-event
     */
    private onError;
    /**
     * Process PapyrosEvents with type="input"
     * @param {PapyrosEvent} e The input-event
     */
    private onInput;
    /**
     * Generic handler function to pass PapyrosEvents to the relevant method
     * @param {PapyrosEvent} e The event ro process
     */
    onMessage(e: PapyrosEvent): void;
    /**
     * Run the code that is currently present in the editor
     * @return {Promise<void>} Promise of running the code
     */
    runCode(): Promise<void>;
    /**
     * Interrupt the currently running code
     * @return {Promise<void>} Promise of stopping
     */
    stop(): Promise<void>;
    /**
     * Render Papyros with the given options
     * @param {PapyrosRenderOptions} renderOptions Options to use
     */
    render(renderOptions: PapyrosRenderOptions): void;
    /**
     * Add a button to the status panel within Papyros
     * @param {ButtonOptions} options Options to render the button with
     * @param {function} onClick Listener for click events on the button
     */
    addButton(options: ButtonOptions, onClick: () => void): void;
    /**
     * @param {ProgrammingLanguage} language The language to check
     * @return {boolean} Whether Papyros supports this language by default
     */
    static supportsProgrammingLanguage(language: string): boolean;
    /**
     * Convert a string to a ProgrammingLanguage
     * @param {string} language The language to convert
     * @return {ProgrammingLanguage | undefined} The ProgrammingLanguage, or undefined if not supported
     */
    static toProgrammingLanguage(language: string): ProgrammingLanguage | undefined;
}
export {};
